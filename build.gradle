// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    repositories {
        google()
        mavenCentral()
//        maven {
//            url "https://stanislavk.jfrog.io/artifactory/fintech-gradle-release" // The Artifactory (preferably virtual) repository to resolve from
//            credentials {               // Optional resolver credentials (leave out to use anonymous resolution)
//                username = "johnyBoy" // Artifactory user name
//                password = "Password1!" // Password or API Key
//            }
//        }
    }
    dependencies {
        classpath "com.android.tools.build:gradle:4.1.3"
        classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:latest.release'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}



allprojects {
    apply plugin: 'com.jfrog.artifactory'
    apply plugin: 'maven-publish'
    repositories {
        google()
        mavenCentral()
/*        maven {
            url "https://stanislavk.jfrog.io/artifactory/fintech-gradle-release"
            // The Artifactory (preferably virtual) repository to resolve from
            credentials {
                // Optional resolver credentials (leave out to use anonymous resolution)
                username = "johnyBoy" // Artifactory user name
                password = "Password1!" // Password or API Key
            }
        }*/
    }
}


artifactoryPublish.skip = true

project('app') {
    artifactoryPublish.dependsOn('build')
    publishing {
        publications {
            app(MavenPublication) {
                groupId = group
                artifactId = project.getName()
                version = currentVersion

                artifact("$buildDir/outputs/apk/release/app-release-unsigned.apk")
            }
        }
    }

    artifactoryPublish {
        publications(publishing.publications.app)
    }
}

//    project('cryptoPaid') {
//    publishing {
//        publications {
//            aar(MavenPublication) {
//                groupId = group
//                artifactId = project.getName()
//                version = currentVersion
//                // Tell maven to prepare the generated "*.aar" file for publishing
//                artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
//            }
//        }
//    }
//
//    artifactoryPublish {
//        publications(publishing.publications.aar)
//    }
//}



artifactory {
    clientConfig.setIncludeEnvVars(true)
    clientConfig.info.addEnvironmentProperty('test.adding.dynVar',new Date().toString())

    contextUrl = "${artifactory_url}"
    publish {
        repository {
            repoKey = 'fintech-libs-snapshot-local' // The Artifactory repository key to publish to
            username =  "${artifactory_user}"// The publisher user name
            password = "${artifactory_password}" // The publisher password

            ivy {
                ivyLayout = '[organization]/[module]/ivy-[revision].xml'
                artifactLayout = '[organization]/[module]/[revision]/[module]-[revision](-[classifier]).[ext]'
                mavenCompatible = true //Convert any dots in an [organization] layout value to path separators, similar to Maven's groupId-to-path conversion. True if not specified
            }
        }
        defaults {
            // Reference to Gradle publications defined in the build script.
            // This is how we tell the Artifactory Plugin which artifacts should be
            // published to Artifactory.
            publishArtifacts = true
            publishBuildInfo = true   //Publish build-info to Artifactory (true by default)
            publishIvy = true   //Publish build-info to Artifactory (true by default)

            // Properties to be attached to the published artifacts.
            properties = ['qa.level': 'basic', 'dev.team' : 'core']
            publishPom = true // Publish generated POM files to Artifactory (true by default)
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}